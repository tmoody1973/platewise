name: PlateWise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript (if applicable)
      run: |
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        fi

  # Job 2: Cultural Sensitivity Testing
  cultural-testing:
    name: 🌍 Cultural Sensitivity Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        language: [en, es, ar, zh, hi, fr]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Cultural Sensitivity Tests
      run: npm run test:cultural
      env:
        TEST_LANGUAGE: ${{ matrix.language }}
        
    - name: Upload Cultural Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cultural-test-results-${{ matrix.language }}
        path: |
          coverage/
          test-results/

  # Job 3: Accessibility Compliance Testing
  accessibility-testing:
    name: ♿ Accessibility Compliance (WCAG 2.1 AA)
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Accessibility Tests
      run: npm run test:accessibility
      
    - name: Run Axe Accessibility Audit
      run: |
        npm run build
        npx serve -s dist -p 3000 &
        sleep 5
        npx @axe-core/cli http://localhost:3000 --exit
        
    - name: Upload Accessibility Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: |
          axe-results.json
          coverage/

  # Job 4: API Integration Testing
  api-testing:
    name: 🔌 API Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: platewise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Supabase CLI
      run: |
        curl -fsSL https://github.com/supabase/cli/releases/download/v1.100.0/supabase_linux_amd64.tar.gz | tar -xz
        sudo mv supabase /usr/local/bin/
        
    - name: Run Database Migrations
      run: |
        supabase db push --db-url postgresql://postgres:postgres@localhost:5432/platewise_test
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Run API Integration Tests
      run: npm run test:api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/platewise_test
        VITE_SUPABASE_URL: http://localhost:54321
        VITE_SUPABASE_ANON_KEY: test-key
        
    - name: Upload API Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: |
          coverage/
          test-results/

  # Job 5: Security & Dependency Scanning
  security-scan:
    name: 🔒 Security & Dependency Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Job 6: Build & Test Coverage
  build-and-coverage:
    name: 🏗️ Build & Coverage Report
    runs-on: ubuntu-latest
    needs: [cultural-testing, accessibility-testing, api-testing]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests with coverage
      run: npm run test:coverage
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: platewise-coverage
        
    - name: Comment Coverage Report
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info

  # Job 7: Deploy to Staging (develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-coverage
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://platewise-staging.vercel.app
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Run Supabase Migrations (Staging)
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_STAGING_REF }}
        supabase db push
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Job 8: Deploy to Production (main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-coverage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://platewise.app
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Run Supabase Migrations (Production)
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PRODUCTION_REF }}
        supabase db push
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: PlateWise v${{ github.run_number }}
        body: |
          🌍 PlateWise Release v${{ github.run_number }}
          
          ## ✅ Quality Assurance Passed
          - Cultural sensitivity tests: ✅
          - Accessibility compliance (WCAG 2.1 AA): ✅
          - API integration tests: ✅
          - Security scan: ✅
          
          ## 🚀 Deployment
          - Production URL: https://platewise.app
          - Database migrations applied
          - All tests passing with >80% coverage
          
          Built with ❤️ for culturally-inclusive food budget management!
        draft: false
        prerelease: false

  # Job 9: Notify Team
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack (Success)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🎉 PlateWise deployment successful!
          
          ✅ Cultural sensitivity tests passed
          ✅ Accessibility compliance verified
          ✅ All API integrations working
          
          🚀 Live at: https://platewise.app
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack (Failure)
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ PlateWise deployment failed!
          
          Please check the GitHub Actions logs for details.
          Cultural sensitivity or accessibility tests may have failed.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}